from django.shortcuts import get_object_or_404, render
from django.http import HttpResponseRedirect, HttpResponse
from .models import Choice, Question, Candidate
from django.template import loader
from django.http import Http404
from django.urls import reverse
from polls.forms import ContactDetails

# Create your views here.

def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    context = {'latest_question_list': latest_question_list}
    return render(request, 'polls/index.html', context)

def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/detail.html', {'question': question})

def results(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/results.html', {'question': question})

def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += selected_choice.votes
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))

def contact(request):
	if request.method == 'POST':
		f = ContactDetails(request.POST)
		if f.is_valid():
			return HttpResponse("thanks")
		
	else:
		f = ContactDetails()
	#print (Candidate.objects.all())
	#form_class= ContactDetails
	return render(request, 'polls/contact.html', {'form' : f,})

def get(self, request):
	form = ContactDetails()
	return render(request, 'polls/contact.html',{'form' : form})



